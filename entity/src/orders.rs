//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "orders")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub customer_id: Uuid,
    pub organization_id: Uuid,
    pub branch_id: Uuid,
    pub order_number: String,
    pub payment_id: Uuid,
    pub total_amount: Decimal,
    pub is_discount_applied: bool,
    pub is_cancelled: bool,
    pub served_by: Uuid,
    pub order_status: String,
    pub till_session_id: Option<Uuid>,
    pub is_tip_applied: bool,
    pub tip_amount: Option<Decimal>,
    pub order_state: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::branches::Entity",
        from = "Column::BranchId",
        to = "super::branches::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Branches,
    #[sea_orm(
        belongs_to = "super::customers::Entity",
        from = "Column::CustomerId",
        to = "super::customers::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Customers,
    #[sea_orm(has_many = "super::order_items::Entity")]
    OrderItems,
    #[sea_orm(
        belongs_to = "super::organizations::Entity",
        from = "Column::OrganizationId",
        to = "super::organizations::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Organizations,
    #[sea_orm(
        belongs_to = "super::till_sessions::Entity",
        from = "Column::TillSessionId",
        to = "super::till_sessions::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    TillSessions,
    #[sea_orm(has_many = "super::tips::Entity")]
    Tips,
    #[sea_orm(
        belongs_to = "super::transactions::Entity",
        from = "Column::PaymentId",
        to = "super::transactions::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Transactions,
}

impl Related<super::branches::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Branches.def()
    }
}

impl Related<super::customers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Customers.def()
    }
}

impl Related<super::order_items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderItems.def()
    }
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organizations.def()
    }
}

impl Related<super::till_sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TillSessions.def()
    }
}

impl Related<super::tips::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tips.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
