//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tickets")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub image_id: Option<String>,
    pub price: Decimal,
    pub is_discount_applied: bool,
    pub discount_rate: Decimal,
    pub slug: Option<String>,
    pub sku: Option<String>,
    pub is_approved: bool,
    pub approved_by: Option<Uuid>,
    pub is_active: bool,
    pub end_date: DateTimeWithTimeZone,
    pub location: Option<String>,
    pub ticket_type: Option<String>,
    pub ticket_event_id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ticket_events::Entity",
        from = "Column::TicketEventId",
        to = "super::ticket_events::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    TicketEvents,
}

impl Related<super::ticket_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TicketEvents.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
