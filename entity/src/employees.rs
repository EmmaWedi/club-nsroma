//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "employees")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub first_name: String,
    pub last_name: String,
    pub email: String,
    pub contact: String,
    pub employee_number: String,
    pub address: String,
    pub gender: String,
    pub date_of_birth: Date,
    pub marital_status: String,
    pub organization_id: Uuid,
    pub branch_id: Uuid,
    pub department_id: Uuid,
    pub identification_type: Option<String>,
    pub identification_number: Option<String>,
    pub identification_image_id: Option<String>,
    pub tax_identification_number: Option<String>,
    pub is_deleted: bool,
    pub is_active: bool,
    pub is_booked_on: Option<bool>,
    pub employee_start_date: Date,
    pub employee_end_date: Option<Date>,
    pub employee_status: String,
    pub role_permissions: Option<Uuid>,
    pub password: Option<String>,
    pub salt: Option<String>,
    pub session: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub deleted_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::accounts::Entity")]
    Accounts,
    #[sea_orm(
        belongs_to = "super::branches::Entity",
        from = "Column::BranchId",
        to = "super::branches::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Branches,
    #[sea_orm(
        belongs_to = "super::departments::Entity",
        from = "Column::DepartmentId",
        to = "super::departments::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Departments,
    #[sea_orm(
        belongs_to = "super::organizations::Entity",
        from = "Column::OrganizationId",
        to = "super::organizations::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Organizations,
    #[sea_orm(
        belongs_to = "super::role_permissions::Entity",
        from = "Column::RolePermissions",
        to = "super::role_permissions::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    RolePermissions,
    #[sea_orm(has_many = "super::staff_leaves::Entity")]
    StaffLeaves,
    #[sea_orm(has_many = "super::staff_shifts::Entity")]
    StaffShifts,
    #[sea_orm(has_many = "super::till_sessions::Entity")]
    TillSessions,
    #[sea_orm(has_many = "super::wallets::Entity")]
    Wallets,
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::branches::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Branches.def()
    }
}

impl Related<super::departments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Departments.def()
    }
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organizations.def()
    }
}

impl Related<super::role_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RolePermissions.def()
    }
}

impl Related<super::staff_leaves::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StaffLeaves.def()
    }
}

impl Related<super::staff_shifts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StaffShifts.def()
    }
}

impl Related<super::till_sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TillSessions.def()
    }
}

impl Related<super::wallets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
