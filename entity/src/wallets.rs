//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "wallets")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub customer_id: Option<Uuid>,
    pub wallet_number: String,
    pub currency: String,
    pub wallet_status: Option<String>,
    pub balance: Decimal,
    pub is_deposit_blocked: Option<bool>,
    pub is_withdrawal_blocked: Option<bool>,
    pub owner_type: Option<String>,
    pub organization_id: Option<Uuid>,
    pub branch_id: Option<Uuid>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::branches::Entity",
        from = "Column::BranchId",
        to = "super::branches::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Branches,
    #[sea_orm(
        belongs_to = "super::customers::Entity",
        from = "Column::CustomerId",
        to = "super::customers::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Customers,
    #[sea_orm(
        belongs_to = "super::organizations::Entity",
        from = "Column::OrganizationId",
        to = "super::organizations::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Organizations,
    #[sea_orm(has_many = "super::wallet_topups::Entity")]
    WalletTopups,
}

impl Related<super::branches::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Branches.def()
    }
}

impl Related<super::customers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Customers.def()
    }
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organizations.def()
    }
}

impl Related<super::wallet_topups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WalletTopups.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
