//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "customers")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub first_name: String,
    pub last_name: String,
    pub contact: String,
    pub email: Option<String>,
    pub is_student: bool,
    pub student_id_number: Option<String>,
    pub student_id_image_id: Option<String>,
    pub customer_number: String,
    pub identification_type: Option<String>,
    pub identification_number: Option<String>,
    pub identification_image_id: Option<String>,
    pub is_blocked: bool,
    pub is_deleted: bool,
    pub blocked_reason: Option<String>,
    pub is_banned: bool,
    pub password: Option<String>,
    pub salt: Option<String>,
    pub session: Option<String>,
    pub date_of_birth: Option<Date>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub deleted_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::accounts::Entity")]
    Accounts,
    #[sea_orm(has_many = "super::ban_records::Entity")]
    BanRecords,
    #[sea_orm(has_many = "super::bookings::Entity")]
    Bookings,
    #[sea_orm(has_many = "super::custom_cocktails::Entity")]
    CustomCocktails,
    #[sea_orm(has_many = "super::orders::Entity")]
    Orders,
    #[sea_orm(has_many = "super::transactions::Entity")]
    Transactions,
    #[sea_orm(has_many = "super::wallets::Entity")]
    Wallets,
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::ban_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BanRecords.def()
    }
}

impl Related<super::bookings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bookings.def()
    }
}

impl Related<super::custom_cocktails::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CustomCocktails.def()
    }
}

impl Related<super::orders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orders.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl Related<super::wallets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
