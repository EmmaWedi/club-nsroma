//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "organizations")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub logo_id: Option<String>,
    pub registered_at: DateTimeWithTimeZone,
    pub is_blocked: bool,
    pub is_active: bool,
    pub web_url: Option<String>,
    pub location: Option<String>,
    pub post_code: Option<String>,
    pub country_id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::accounts::Entity")]
    Accounts,
    #[sea_orm(has_many = "super::bookings::Entity")]
    Bookings,
    #[sea_orm(has_many = "super::branches::Entity")]
    Branches,
    #[sea_orm(has_many = "super::carousels::Entity")]
    Carousels,
    #[sea_orm(has_many = "super::contact_lists::Entity")]
    ContactLists,
    #[sea_orm(
        belongs_to = "super::countries::Entity",
        from = "Column::CountryId",
        to = "super::countries::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Countries,
    #[sea_orm(has_many = "super::custom_cocktails::Entity")]
    CustomCocktails,
    #[sea_orm(has_many = "super::departments::Entity")]
    Departments,
    #[sea_orm(has_many = "super::employees::Entity")]
    Employees,
    #[sea_orm(has_many = "super::events::Entity")]
    Events,
    #[sea_orm(has_many = "super::freebies::Entity")]
    Freebies,
    #[sea_orm(has_many = "super::guest_bookings::Entity")]
    GuestBookings,
    #[sea_orm(has_many = "super::orders::Entity")]
    Orders,
    #[sea_orm(has_many = "super::schedules::Entity")]
    Schedules,
    #[sea_orm(has_many = "super::stock_drinks::Entity")]
    StockDrinks,
    #[sea_orm(has_many = "super::stock_foods::Entity")]
    StockFoods,
    #[sea_orm(has_many = "super::suppliers::Entity")]
    Suppliers,
    #[sea_orm(has_many = "super::till_sessions::Entity")]
    TillSessions,
    #[sea_orm(has_many = "super::tips::Entity")]
    Tips,
    #[sea_orm(has_many = "super::transactions::Entity")]
    Transactions,
    #[sea_orm(has_many = "super::users::Entity")]
    Users,
    #[sea_orm(has_many = "super::wallets::Entity")]
    Wallets,
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::bookings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bookings.def()
    }
}

impl Related<super::branches::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Branches.def()
    }
}

impl Related<super::carousels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Carousels.def()
    }
}

impl Related<super::contact_lists::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContactLists.def()
    }
}

impl Related<super::countries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Countries.def()
    }
}

impl Related<super::custom_cocktails::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CustomCocktails.def()
    }
}

impl Related<super::departments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Departments.def()
    }
}

impl Related<super::employees::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Employees.def()
    }
}

impl Related<super::events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Events.def()
    }
}

impl Related<super::freebies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Freebies.def()
    }
}

impl Related<super::guest_bookings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuestBookings.def()
    }
}

impl Related<super::orders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orders.def()
    }
}

impl Related<super::schedules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Schedules.def()
    }
}

impl Related<super::stock_drinks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StockDrinks.def()
    }
}

impl Related<super::stock_foods::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StockFoods.def()
    }
}

impl Related<super::suppliers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Suppliers.def()
    }
}

impl Related<super::till_sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TillSessions.def()
    }
}

impl Related<super::tips::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tips.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::wallets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
